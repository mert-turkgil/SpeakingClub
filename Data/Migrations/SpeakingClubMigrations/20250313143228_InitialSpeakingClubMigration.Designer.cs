// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SpeakingClub.Data;

#nullable disable

namespace SpeakingClub.Data.Migrations.SpeakingClubMigrations
{
    [DbContext(typeof(SpeakingClubContext))]
    [Migration("20250313143228_InitialSpeakingClubMigration")]
    partial class InitialSpeakingClubMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ArticleTag", b =>
                {
                    b.Property<int>("ArticlesArticleId")
                        .HasColumnType("int");

                    b.Property<int>("TagsTagId")
                        .HasColumnType("int");

                    b.HasKey("ArticlesArticleId", "TagsTagId");

                    b.HasIndex("TagsTagId");

                    b.ToTable("ArticleTag");

                    b.HasData(
                        new
                        {
                            ArticlesArticleId = 1,
                            TagsTagId = 1
                        },
                        new
                        {
                            ArticlesArticleId = 1,
                            TagsTagId = 2
                        },
                        new
                        {
                            ArticlesArticleId = 2,
                            TagsTagId = 3
                        });
                });

            modelBuilder.Entity("BlogQuiz", b =>
                {
                    b.Property<int>("BlogsBlogId")
                        .HasColumnType("int");

                    b.Property<int>("QuizId")
                        .HasColumnType("int");

                    b.HasKey("BlogsBlogId", "QuizId");

                    b.HasIndex("QuizId");

                    b.ToTable("BlogQuiz");
                });

            modelBuilder.Entity("BlogTag", b =>
                {
                    b.Property<int>("BlogsBlogId")
                        .HasColumnType("int");

                    b.Property<int>("TagsTagId")
                        .HasColumnType("int");

                    b.HasKey("BlogsBlogId", "TagsTagId");

                    b.HasIndex("TagsTagId");

                    b.ToTable("BlogTag");

                    b.HasData(
                        new
                        {
                            BlogsBlogId = 1,
                            TagsTagId = 2
                        },
                        new
                        {
                            BlogsBlogId = 2,
                            TagsTagId = 4
                        });
                });

            modelBuilder.Entity("QuizTag", b =>
                {
                    b.Property<int>("QuizzesId")
                        .HasColumnType("int");

                    b.Property<int>("TagsTagId")
                        .HasColumnType("int");

                    b.HasKey("QuizzesId", "TagsTagId");

                    b.HasIndex("TagsTagId");

                    b.ToTable("QuizTag");

                    b.HasData(
                        new
                        {
                            QuizzesId = 1,
                            TagsTagId = 1
                        },
                        new
                        {
                            QuizzesId = 2,
                            TagsTagId = 5
                        });
                });

            modelBuilder.Entity("QuizWord", b =>
                {
                    b.Property<int>("QuizzesId")
                        .HasColumnType("int");

                    b.Property<int>("WordsWordId")
                        .HasColumnType("int");

                    b.HasKey("QuizzesId", "WordsWordId");

                    b.HasIndex("WordsWordId");

                    b.ToTable("QuizWord");

                    b.HasData(
                        new
                        {
                            QuizzesId = 2,
                            WordsWordId = 1
                        },
                        new
                        {
                            QuizzesId = 2,
                            WordsWordId = 2
                        });
                });

            modelBuilder.Entity("SpeakingClub.Entity.Article", b =>
                {
                    b.Property<int>("ArticleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ArticleId"));

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TeacherId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ArticleId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Articles");

                    b.HasData(
                        new
                        {
                            ArticleId = 1,
                            CategoryId = 1,
                            Content = "Lorem ipsum dolor sit amet, consectetur adipiscing elit.",
                            Date = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "image1.jpg",
                            TeacherId = "teacher1",
                            Title = "Introduction to English",
                            Url = "http://example.com/article1"
                        },
                        new
                        {
                            ArticleId = 2,
                            CategoryId = 2,
                            Content = "Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.",
                            Date = new DateTime(2025, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "image2.jpg",
                            TeacherId = "teacher2",
                            Title = "Advanced English Techniques",
                            Url = "http://example.com/article2"
                        });
                });

            modelBuilder.Entity("SpeakingClub.Entity.Blog", b =>
                {
                    b.Property<int>("BlogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BlogId"));

                    b.Property<string>("Author")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RawMaps")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RawYT")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BlogId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Blogs");

                    b.HasData(
                        new
                        {
                            BlogId = 1,
                            Author = "Author1",
                            CategoryId = 1,
                            Content = "Content of blog post 1.",
                            Date = new DateTime(2025, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "blog1.jpg",
                            RawMaps = "",
                            RawYT = "",
                            Title = "Blog Post 1",
                            Url = "http://example.com/blog1"
                        },
                        new
                        {
                            BlogId = 2,
                            Author = "Author2",
                            CategoryId = 2,
                            Content = "Content of blog post 2.",
                            Date = new DateTime(2025, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "blog2.jpg",
                            RawMaps = "",
                            RawYT = "",
                            Title = "Blog Post 2",
                            Url = "http://example.com/blog2"
                        });
                });

            modelBuilder.Entity("SpeakingClub.Entity.BlogQuiz", b =>
                {
                    b.Property<int>("BlogId")
                        .HasColumnType("int");

                    b.Property<int>("QuizId")
                        .HasColumnType("int");

                    b.HasKey("BlogId", "QuizId");

                    b.HasIndex("QuizId");

                    b.ToTable("BlogQuizzes");

                    b.HasData(
                        new
                        {
                            BlogId = 1,
                            QuizId = 1
                        },
                        new
                        {
                            BlogId = 2,
                            QuizId = 2
                        });
                });

            modelBuilder.Entity("SpeakingClub.Entity.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            Name = "General"
                        },
                        new
                        {
                            CategoryId = 2,
                            Name = "Science"
                        },
                        new
                        {
                            CategoryId = 3,
                            Name = "Technology"
                        });
                });

            modelBuilder.Entity("SpeakingClub.Entity.Comment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommentId"));

                    b.Property<int?>("BlogId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("QuizId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CommentId");

                    b.HasIndex("BlogId");

                    b.HasIndex("QuizId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");

                    b.HasData(
                        new
                        {
                            CommentId = 1,
                            BlogId = 1,
                            Content = "Great blog!",
                            Date = new DateTime(2025, 2, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = "user1"
                        },
                        new
                        {
                            CommentId = 2,
                            Content = "Challenging quiz!",
                            Date = new DateTime(2025, 3, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            QuizId = 2,
                            UserId = "user2"
                        });
                });

            modelBuilder.Entity("SpeakingClub.Entity.Quiz", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AudioUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TeacherId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("YouTubeVideoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Quizzes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AudioUrl = "http://example.com/audio1.mp3",
                            CategoryId = 1,
                            Description = "Description for quiz 1.",
                            TeacherId = "teacher1",
                            Title = "Quiz 1",
                            YouTubeVideoUrl = "http://youtube.com/vid1"
                        },
                        new
                        {
                            Id = 2,
                            AudioUrl = "http://example.com/audio2.mp3",
                            CategoryId = 2,
                            Description = "Description for quiz 2.",
                            TeacherId = "teacher2",
                            Title = "Quiz 2",
                            YouTubeVideoUrl = "http://youtube.com/vid2"
                        });
                });

            modelBuilder.Entity("SpeakingClub.Entity.QuizAnalysis", b =>
                {
                    b.Property<double>("AverageScore")
                        .HasColumnType("float");

                    b.Property<int>("QuizId")
                        .HasColumnType("int");

                    b.Property<int>("TotalSubmissions")
                        .HasColumnType("int");

                    b.ToTable("QuizAnalyses");
                });

            modelBuilder.Entity("SpeakingClub.Entity.QuizAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AnswerText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<int>("QuizId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuizId");

                    b.ToTable("QuizAnswers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AnswerText = "Answer 1",
                            IsCorrect = true,
                            QuizId = 1
                        },
                        new
                        {
                            Id = 2,
                            AnswerText = "Answer 2",
                            IsCorrect = false,
                            QuizId = 1
                        },
                        new
                        {
                            Id = 3,
                            AnswerText = "Answer A",
                            IsCorrect = false,
                            QuizId = 2
                        },
                        new
                        {
                            Id = 4,
                            AnswerText = "Answer B",
                            IsCorrect = true,
                            QuizId = 2
                        });
                });

            modelBuilder.Entity("SpeakingClub.Entity.QuizResponse", b =>
                {
                    b.Property<int>("QuizResponseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuizResponseId"));

                    b.Property<string>("AnswerText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("QuizAnswerId")
                        .HasColumnType("int");

                    b.Property<int>("QuizSubmissionId")
                        .HasColumnType("int");

                    b.HasKey("QuizResponseId");

                    b.HasIndex("QuizAnswerId");

                    b.HasIndex("QuizSubmissionId");

                    b.ToTable("QuizResponses");

                    b.HasData(
                        new
                        {
                            QuizResponseId = 1,
                            AnswerText = "User1 answer to Quiz1",
                            QuizAnswerId = 1,
                            QuizSubmissionId = 1
                        });
                });

            modelBuilder.Entity("SpeakingClub.Entity.QuizSubmission", b =>
                {
                    b.Property<int>("QuizSubmissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuizSubmissionId"));

                    b.Property<int>("AttemptNumber")
                        .HasColumnType("int");

                    b.Property<int>("QuizId")
                        .HasColumnType("int");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<DateTime>("SubmissionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("QuizSubmissionId");

                    b.HasIndex("QuizId");

                    b.HasIndex("UserId");

                    b.ToTable("QuizSubmissions");

                    b.HasData(
                        new
                        {
                            QuizSubmissionId = 1,
                            AttemptNumber = 1,
                            QuizId = 1,
                            Score = 80,
                            SubmissionDate = new DateTime(2025, 2, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = "user1"
                        },
                        new
                        {
                            QuizSubmissionId = 2,
                            AttemptNumber = 1,
                            QuizId = 1,
                            Score = 90,
                            SubmissionDate = new DateTime(2025, 2, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = "user2"
                        },
                        new
                        {
                            QuizSubmissionId = 3,
                            AttemptNumber = 1,
                            QuizId = 2,
                            Score = 75,
                            SubmissionDate = new DateTime(2025, 3, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = "user1"
                        },
                        new
                        {
                            QuizSubmissionId = 4,
                            AttemptNumber = 2,
                            QuizId = 2,
                            Score = 85,
                            SubmissionDate = new DateTime(2025, 3, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = "user1"
                        });
                });

            modelBuilder.Entity("SpeakingClub.Entity.Rating", b =>
                {
                    b.Property<int>("RatingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RatingId"));

                    b.Property<int?>("BlogId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("QuizId")
                        .HasColumnType("int");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("RatingId");

                    b.HasIndex("BlogId");

                    b.HasIndex("QuizId");

                    b.HasIndex("UserId");

                    b.ToTable("Ratings");

                    b.HasData(
                        new
                        {
                            RatingId = 1,
                            BlogId = 1,
                            Date = new DateTime(2025, 2, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Score = 5,
                            UserId = "user2"
                        },
                        new
                        {
                            RatingId = 2,
                            Date = new DateTime(2025, 3, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            QuizId = 2,
                            Score = 4,
                            UserId = "user1"
                        });
                });

            modelBuilder.Entity("SpeakingClub.Entity.Tag", b =>
                {
                    b.Property<int>("TagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TagId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("TagId");

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            TagId = 1,
                            Name = "Grammar"
                        },
                        new
                        {
                            TagId = 2,
                            Name = "Vocabulary"
                        },
                        new
                        {
                            TagId = 3,
                            Name = "Listening"
                        },
                        new
                        {
                            TagId = 4,
                            Name = "Reading"
                        },
                        new
                        {
                            TagId = 5,
                            Name = "Writing"
                        });
                });

            modelBuilder.Entity("SpeakingClub.Entity.UserQuiz", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("QuizId")
                        .HasColumnType("int");

                    b.Property<int>("TotalAttempts")
                        .HasColumnType("int");

                    b.HasKey("UserId", "QuizId");

                    b.HasIndex("QuizId");

                    b.ToTable("UserQuizzes");

                    b.HasData(
                        new
                        {
                            UserId = "user1",
                            QuizId = 1,
                            TotalAttempts = 1
                        },
                        new
                        {
                            UserId = "user2",
                            QuizId = 1,
                            TotalAttempts = 1
                        },
                        new
                        {
                            UserId = "user1",
                            QuizId = 2,
                            TotalAttempts = 2
                        });
                });

            modelBuilder.Entity("SpeakingClub.Entity.Word", b =>
                {
                    b.Property<int>("WordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WordId"));

                    b.Property<string>("Definition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Example")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsFromApi")
                        .HasColumnType("bit");

                    b.Property<string>("Term")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("WordId");

                    b.ToTable("Words");

                    b.HasData(
                        new
                        {
                            WordId = 1,
                            Definition = "A deviation from the norm",
                            Example = "The color aberration was noticeable.",
                            IsFromApi = false,
                            Term = "Aberration"
                        },
                        new
                        {
                            WordId = 2,
                            Definition = "Kind and generous",
                            Example = "She had a benevolent smile.",
                            IsFromApi = false,
                            Term = "Benevolent"
                        });
                });

            modelBuilder.Entity("SpeakingClub.Identity.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            Id = "teacher1",
                            AccessFailedCount = 0,
                            Age = 35,
                            ConcurrencyStamp = "concurrency_stamp_teacher1",
                            Email = "teacher1@example.com",
                            EmailConfirmed = true,
                            FirstName = "Teacher",
                            LastName = "One",
                            LockoutEnabled = false,
                            NormalizedEmail = "TEACHER1@EXAMPLE.COM",
                            NormalizedUserName = "TEACHER1",
                            PasswordHash = "FakeHash",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "security_stamp_teacher1",
                            TwoFactorEnabled = false,
                            UserName = "teacher1"
                        },
                        new
                        {
                            Id = "teacher2",
                            AccessFailedCount = 0,
                            Age = 40,
                            ConcurrencyStamp = "concurrency_stamp_teacher2",
                            Email = "teacher2@example.com",
                            EmailConfirmed = true,
                            FirstName = "Teacher",
                            LastName = "Two",
                            LockoutEnabled = false,
                            NormalizedEmail = "TEACHER2@EXAMPLE.COM",
                            NormalizedUserName = "TEACHER2",
                            PasswordHash = "FakeHash",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "security_stamp_teacher2",
                            TwoFactorEnabled = false,
                            UserName = "teacher2"
                        },
                        new
                        {
                            Id = "user1",
                            AccessFailedCount = 0,
                            Age = 25,
                            ConcurrencyStamp = "concurrency_stamp_user1",
                            Email = "user1@example.com",
                            EmailConfirmed = true,
                            FirstName = "User",
                            LastName = "One",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER1@EXAMPLE.COM",
                            NormalizedUserName = "USER1",
                            PasswordHash = "FakeHash",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "security_stamp_user1",
                            TwoFactorEnabled = false,
                            UserName = "user1"
                        },
                        new
                        {
                            Id = "user2",
                            AccessFailedCount = 0,
                            Age = 30,
                            ConcurrencyStamp = "concurrency_stamp_user2",
                            Email = "user2@example.com",
                            EmailConfirmed = true,
                            FirstName = "User",
                            LastName = "Two",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER2@EXAMPLE.COM",
                            NormalizedUserName = "USER2",
                            PasswordHash = "FakeHash",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "security_stamp_user2",
                            TwoFactorEnabled = false,
                            UserName = "user2"
                        });
                });

            modelBuilder.Entity("ArticleTag", b =>
                {
                    b.HasOne("SpeakingClub.Entity.Article", null)
                        .WithMany()
                        .HasForeignKey("ArticlesArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SpeakingClub.Entity.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsTagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BlogQuiz", b =>
                {
                    b.HasOne("SpeakingClub.Entity.Blog", null)
                        .WithMany()
                        .HasForeignKey("BlogsBlogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SpeakingClub.Entity.Quiz", null)
                        .WithMany()
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BlogTag", b =>
                {
                    b.HasOne("SpeakingClub.Entity.Blog", null)
                        .WithMany()
                        .HasForeignKey("BlogsBlogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SpeakingClub.Entity.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsTagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QuizTag", b =>
                {
                    b.HasOne("SpeakingClub.Entity.Quiz", null)
                        .WithMany()
                        .HasForeignKey("QuizzesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SpeakingClub.Entity.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsTagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QuizWord", b =>
                {
                    b.HasOne("SpeakingClub.Entity.Quiz", null)
                        .WithMany()
                        .HasForeignKey("QuizzesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SpeakingClub.Entity.Word", null)
                        .WithMany()
                        .HasForeignKey("WordsWordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SpeakingClub.Entity.Article", b =>
                {
                    b.HasOne("SpeakingClub.Entity.Category", "Category")
                        .WithMany("Articles")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("SpeakingClub.Identity.User", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId");

                    b.Navigation("Category");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("SpeakingClub.Entity.Blog", b =>
                {
                    b.HasOne("SpeakingClub.Entity.Category", "Category")
                        .WithMany("Blogs")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Category");
                });

            modelBuilder.Entity("SpeakingClub.Entity.BlogQuiz", b =>
                {
                    b.HasOne("SpeakingClub.Entity.Blog", "Blog")
                        .WithMany()
                        .HasForeignKey("BlogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SpeakingClub.Entity.Quiz", "Quiz")
                        .WithMany()
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Blog");

                    b.Navigation("Quiz");
                });

            modelBuilder.Entity("SpeakingClub.Entity.Comment", b =>
                {
                    b.HasOne("SpeakingClub.Entity.Blog", "Blog")
                        .WithMany()
                        .HasForeignKey("BlogId");

                    b.HasOne("SpeakingClub.Entity.Quiz", "Quiz")
                        .WithMany()
                        .HasForeignKey("QuizId");

                    b.HasOne("SpeakingClub.Identity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Blog");

                    b.Navigation("Quiz");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SpeakingClub.Entity.Quiz", b =>
                {
                    b.HasOne("SpeakingClub.Entity.Category", "Category")
                        .WithMany("Quizzes")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("SpeakingClub.Identity.User", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId");

                    b.Navigation("Category");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("SpeakingClub.Entity.QuizAnswer", b =>
                {
                    b.HasOne("SpeakingClub.Entity.Quiz", "Quiz")
                        .WithMany("Answers")
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Quiz");
                });

            modelBuilder.Entity("SpeakingClub.Entity.QuizResponse", b =>
                {
                    b.HasOne("SpeakingClub.Entity.QuizAnswer", "QuizAnswer")
                        .WithMany()
                        .HasForeignKey("QuizAnswerId");

                    b.HasOne("SpeakingClub.Entity.QuizSubmission", "QuizSubmission")
                        .WithMany()
                        .HasForeignKey("QuizSubmissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QuizAnswer");

                    b.Navigation("QuizSubmission");
                });

            modelBuilder.Entity("SpeakingClub.Entity.QuizSubmission", b =>
                {
                    b.HasOne("SpeakingClub.Entity.Quiz", "Quiz")
                        .WithMany()
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SpeakingClub.Identity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Quiz");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SpeakingClub.Entity.Rating", b =>
                {
                    b.HasOne("SpeakingClub.Entity.Blog", "Blog")
                        .WithMany()
                        .HasForeignKey("BlogId");

                    b.HasOne("SpeakingClub.Entity.Quiz", "Quiz")
                        .WithMany()
                        .HasForeignKey("QuizId");

                    b.HasOne("SpeakingClub.Identity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Blog");

                    b.Navigation("Quiz");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SpeakingClub.Entity.UserQuiz", b =>
                {
                    b.HasOne("SpeakingClub.Entity.Quiz", "Quiz")
                        .WithMany("UserQuizzes")
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SpeakingClub.Identity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Quiz");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SpeakingClub.Entity.Category", b =>
                {
                    b.Navigation("Articles");

                    b.Navigation("Blogs");

                    b.Navigation("Quizzes");
                });

            modelBuilder.Entity("SpeakingClub.Entity.Quiz", b =>
                {
                    b.Navigation("Answers");

                    b.Navigation("UserQuizzes");
                });
#pragma warning restore 612, 618
        }
    }
}
