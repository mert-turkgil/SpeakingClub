// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SpeakingClub.Data;

#nullable disable

namespace SpeakingClub.Data.Migrations.SpeakingClubMigrations
{
    [DbContext(typeof(SpeakingClubContext))]
    [Migration("20251004175845_RenameTeacherIdToTeacherName")]
    partial class RenameTeacherIdToTeacherName
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BlogQuiz", b =>
                {
                    b.Property<int>("BlogsBlogId")
                        .HasColumnType("int");

                    b.Property<int>("QuizId")
                        .HasColumnType("int");

                    b.HasKey("BlogsBlogId", "QuizId");

                    b.HasIndex("QuizId");

                    b.ToTable("BlogQuiz");
                });

            modelBuilder.Entity("BlogTag", b =>
                {
                    b.Property<int>("BlogsBlogId")
                        .HasColumnType("int");

                    b.Property<int>("TagsTagId")
                        .HasColumnType("int");

                    b.HasKey("BlogsBlogId", "TagsTagId");

                    b.HasIndex("TagsTagId");

                    b.ToTable("BlogTag");

                    b.HasData(
                        new
                        {
                            BlogsBlogId = 1,
                            TagsTagId = 2
                        },
                        new
                        {
                            BlogsBlogId = 2,
                            TagsTagId = 4
                        });
                });

            modelBuilder.Entity("QuizTag", b =>
                {
                    b.Property<int>("QuizzesId")
                        .HasColumnType("int");

                    b.Property<int>("TagsTagId")
                        .HasColumnType("int");

                    b.HasKey("QuizzesId", "TagsTagId");

                    b.HasIndex("TagsTagId");

                    b.ToTable("QuizTag");

                    b.HasData(
                        new
                        {
                            QuizzesId = 1,
                            TagsTagId = 1
                        });
                });

            modelBuilder.Entity("QuizWord", b =>
                {
                    b.Property<int>("QuizzesId")
                        .HasColumnType("int");

                    b.Property<int>("WordsWordId")
                        .HasColumnType("int");

                    b.HasKey("QuizzesId", "WordsWordId");

                    b.HasIndex("WordsWordId");

                    b.ToTable("QuizWord");

                    b.HasData(
                        new
                        {
                            QuizzesId = 1,
                            WordsWordId = 1
                        },
                        new
                        {
                            QuizzesId = 1,
                            WordsWordId = 2
                        });
                });

            modelBuilder.Entity("SpeakingClub.Entity.Blog", b =>
                {
                    b.Property<int>("BlogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BlogId"));

                    b.Property<string>("Author")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RawMaps")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RawYT")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SelectedQuestionId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isHome")
                        .HasColumnType("bit");

                    b.HasKey("BlogId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Blogs");

                    b.HasData(
                        new
                        {
                            BlogId = 1,
                            Author = "Author1",
                            CategoryId = 1,
                            Content = "Content of blog post 1.",
                            Date = new DateTime(2025, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "blog1.jpg",
                            RawMaps = "",
                            RawYT = "",
                            Title = "Blog Post 1",
                            Url = "blog1",
                            isHome = true
                        },
                        new
                        {
                            BlogId = 2,
                            Author = "Author2",
                            CategoryId = 2,
                            Content = "Content of blog post 2.",
                            Date = new DateTime(2025, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "blog2.jpg",
                            RawMaps = "",
                            RawYT = "",
                            Title = "Blog Post 2",
                            Url = "blog2",
                            isHome = true
                        });
                });

            modelBuilder.Entity("SpeakingClub.Entity.BlogQuiz", b =>
                {
                    b.Property<int>("BlogId")
                        .HasColumnType("int");

                    b.Property<int>("QuizId")
                        .HasColumnType("int");

                    b.HasKey("BlogId", "QuizId");

                    b.HasIndex("QuizId");

                    b.ToTable("BlogQuizzes");

                    b.HasData(
                        new
                        {
                            BlogId = 1,
                            QuizId = 1
                        });
                });

            modelBuilder.Entity("SpeakingClub.Entity.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            Name = "General"
                        },
                        new
                        {
                            CategoryId = 2,
                            Name = "Science"
                        },
                        new
                        {
                            CategoryId = 3,
                            Name = "Technology"
                        });
                });

            modelBuilder.Entity("SpeakingClub.Entity.Comment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommentId"));

                    b.Property<int?>("BlogId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("QuizId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CommentId");

                    b.HasIndex("BlogId");

                    b.HasIndex("QuizId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("SpeakingClub.Entity.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AudioUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QuestionText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("QuizId")
                        .HasColumnType("int");

                    b.Property<string>("VideoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("QuizId");

                    b.ToTable("Questions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            QuestionText = "What is 2 + 2?",
                            QuizId = 1
                        },
                        new
                        {
                            Id = 2,
                            ImageUrl = "https://example.com/images/france.jpg",
                            QuestionText = "What is the capital of France?",
                            QuizId = 1
                        },
                        new
                        {
                            Id = 3,
                            AudioUrl = "https://example.com/audio/instrument.mp3",
                            QuestionText = "Identify the instrument in the audio clip.",
                            QuizId = 1
                        },
                        new
                        {
                            Id = 4,
                            QuestionText = "Watch the video and answer: Who is the speaker?",
                            QuizId = 1,
                            VideoUrl = "https://youtube.com/watch?v=example"
                        });
                });

            modelBuilder.Entity("SpeakingClub.Entity.Quiz", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AudioUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TeacherName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("YouTubeVideoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Quizzes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AudioUrl = "https://example.com/audio1.mp3",
                            CategoryId = 1,
                            Description = "A quiz to test your general knowledge.",
                            TeacherName = "teacher1",
                            Title = "General Knowledge Quiz",
                            YouTubeVideoUrl = "https://youtube.com/vid1"
                        });
                });

            modelBuilder.Entity("SpeakingClub.Entity.QuizAnalysis", b =>
                {
                    b.Property<double>("AverageScore")
                        .HasColumnType("float");

                    b.Property<int>("QuizId")
                        .HasColumnType("int");

                    b.Property<int>("TotalSubmissions")
                        .HasColumnType("int");

                    b.ToTable("QuizAnalyses");
                });

            modelBuilder.Entity("SpeakingClub.Entity.QuizAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AnswerText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int?>("QuizId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.HasIndex("QuizId");

                    b.ToTable("QuizAnswers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AnswerText = "4",
                            IsCorrect = true,
                            QuestionId = 1
                        },
                        new
                        {
                            Id = 2,
                            AnswerText = "3",
                            IsCorrect = false,
                            QuestionId = 1
                        },
                        new
                        {
                            Id = 3,
                            AnswerText = "5",
                            IsCorrect = false,
                            QuestionId = 1
                        },
                        new
                        {
                            Id = 4,
                            AnswerText = "Paris",
                            IsCorrect = true,
                            QuestionId = 2
                        },
                        new
                        {
                            Id = 5,
                            AnswerText = "Berlin",
                            IsCorrect = false,
                            QuestionId = 2
                        },
                        new
                        {
                            Id = 6,
                            AnswerText = "Madrid",
                            IsCorrect = false,
                            QuestionId = 2
                        },
                        new
                        {
                            Id = 7,
                            AnswerText = "Piano",
                            IsCorrect = true,
                            QuestionId = 3
                        },
                        new
                        {
                            Id = 8,
                            AnswerText = "Guitar",
                            IsCorrect = false,
                            QuestionId = 3
                        },
                        new
                        {
                            Id = 9,
                            AnswerText = "Violin",
                            IsCorrect = false,
                            QuestionId = 3
                        },
                        new
                        {
                            Id = 10,
                            AnswerText = "Dr. Smith",
                            IsCorrect = true,
                            QuestionId = 4
                        },
                        new
                        {
                            Id = 11,
                            AnswerText = "Mr. Johnson",
                            IsCorrect = false,
                            QuestionId = 4
                        },
                        new
                        {
                            Id = 12,
                            AnswerText = "Ms. Davis",
                            IsCorrect = false,
                            QuestionId = 4
                        });
                });

            modelBuilder.Entity("SpeakingClub.Entity.QuizResponse", b =>
                {
                    b.Property<int>("QuizResponseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuizResponseId"));

                    b.Property<string>("AnswerText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("QuizAnswerId")
                        .HasColumnType("int");

                    b.Property<int>("QuizSubmissionId")
                        .HasColumnType("int");

                    b.Property<int>("TimeTakenSeconds")
                        .HasColumnType("int");

                    b.HasKey("QuizResponseId");

                    b.HasIndex("QuizAnswerId");

                    b.HasIndex("QuizSubmissionId");

                    b.ToTable("QuizResponses");

                    b.HasData(
                        new
                        {
                            QuizResponseId = 1,
                            AnswerText = "4",
                            QuizAnswerId = 1,
                            QuizSubmissionId = 1,
                            TimeTakenSeconds = 10
                        },
                        new
                        {
                            QuizResponseId = 2,
                            AnswerText = "Paris",
                            QuizAnswerId = 4,
                            QuizSubmissionId = 1,
                            TimeTakenSeconds = 15
                        },
                        new
                        {
                            QuizResponseId = 3,
                            AnswerText = "Piano",
                            QuizAnswerId = 7,
                            QuizSubmissionId = 1,
                            TimeTakenSeconds = 20
                        },
                        new
                        {
                            QuizResponseId = 4,
                            AnswerText = "Dr. Smith",
                            QuizAnswerId = 10,
                            QuizSubmissionId = 1,
                            TimeTakenSeconds = 18
                        },
                        new
                        {
                            QuizResponseId = 5,
                            AnswerText = "3",
                            QuizAnswerId = 2,
                            QuizSubmissionId = 2,
                            TimeTakenSeconds = 12
                        },
                        new
                        {
                            QuizResponseId = 6,
                            AnswerText = "Paris",
                            QuizAnswerId = 4,
                            QuizSubmissionId = 2,
                            TimeTakenSeconds = 17
                        },
                        new
                        {
                            QuizResponseId = 7,
                            AnswerText = "Guitar",
                            QuizAnswerId = 8,
                            QuizSubmissionId = 2,
                            TimeTakenSeconds = 25
                        },
                        new
                        {
                            QuizResponseId = 8,
                            AnswerText = "Dr. Smith",
                            QuizAnswerId = 10,
                            QuizSubmissionId = 2,
                            TimeTakenSeconds = 22
                        },
                        new
                        {
                            QuizResponseId = 9,
                            AnswerText = "3",
                            QuizAnswerId = 2,
                            QuizSubmissionId = 3,
                            TimeTakenSeconds = 12
                        },
                        new
                        {
                            QuizResponseId = 10,
                            AnswerText = "Paris",
                            QuizAnswerId = 4,
                            QuizSubmissionId = 3,
                            TimeTakenSeconds = 17
                        },
                        new
                        {
                            QuizResponseId = 11,
                            AnswerText = "Guitar",
                            QuizAnswerId = 8,
                            QuizSubmissionId = 3,
                            TimeTakenSeconds = 25
                        },
                        new
                        {
                            QuizResponseId = 12,
                            AnswerText = "Dr. Smith",
                            QuizAnswerId = 10,
                            QuizSubmissionId = 3,
                            TimeTakenSeconds = 22
                        });
                });

            modelBuilder.Entity("SpeakingClub.Entity.QuizSubmission", b =>
                {
                    b.Property<int>("QuizSubmissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuizSubmissionId"));

                    b.Property<int>("AttemptNumber")
                        .HasColumnType("int");

                    b.Property<int>("QuizId")
                        .HasColumnType("int");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<DateTime>("SubmissionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("QuizSubmissionId");

                    b.HasIndex("QuizId");

                    b.ToTable("QuizSubmissions");

                    b.HasData(
                        new
                        {
                            QuizSubmissionId = 1,
                            AttemptNumber = 1,
                            QuizId = 1,
                            Score = 100,
                            SubmissionDate = new DateTime(2025, 10, 2, 17, 58, 43, 889, DateTimeKind.Utc).AddTicks(7605),
                            UserId = "user1-id"
                        },
                        new
                        {
                            QuizSubmissionId = 2,
                            AttemptNumber = 2,
                            QuizId = 1,
                            Score = 50,
                            SubmissionDate = new DateTime(2025, 10, 3, 17, 58, 43, 889, DateTimeKind.Utc).AddTicks(7615),
                            UserId = "user1-id"
                        },
                        new
                        {
                            QuizSubmissionId = 3,
                            AttemptNumber = 1,
                            QuizId = 1,
                            Score = 40,
                            SubmissionDate = new DateTime(2025, 10, 3, 17, 58, 43, 889, DateTimeKind.Utc).AddTicks(7617),
                            UserId = "user2-id"
                        });
                });

            modelBuilder.Entity("SpeakingClub.Entity.Rating", b =>
                {
                    b.Property<int>("RatingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RatingId"));

                    b.Property<int?>("BlogId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("QuizId")
                        .HasColumnType("int");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("RatingId");

                    b.HasIndex("BlogId");

                    b.HasIndex("QuizId");

                    b.HasIndex("UserId");

                    b.ToTable("Ratings");
                });

            modelBuilder.Entity("SpeakingClub.Entity.SlideShow", b =>
                {
                    b.Property<int>("SlideId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SlideId"));

                    b.Property<string>("CarouselDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CarouselImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CarouselImage1200w")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CarouselImage600w")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CarouselLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CarouselLinkText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CarouselTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateAdded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.HasKey("SlideId");

                    b.ToTable("Slide");

                    b.HasData(
                        new
                        {
                            SlideId = 1,
                            CarouselDescription = "Description for slide 1",
                            CarouselImage = "slide1.jpg",
                            CarouselImage1200w = "slide1_1200w.jpg",
                            CarouselImage600w = "slide1_600w.jpg",
                            CarouselLink = "https://example.com/slide1",
                            CarouselLinkText = "Learn More",
                            CarouselTitle = "Slide 1",
                            DateAdded = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            SlideId = 2,
                            CarouselDescription = "Description for slide 2",
                            CarouselImage = "slide2.jpg",
                            CarouselImage1200w = "slide2_1200w.jpg",
                            CarouselImage600w = "slide2_600w.jpg",
                            CarouselLink = "https://example.com/slide2",
                            CarouselLinkText = "Learn More",
                            CarouselTitle = "Slide 2",
                            DateAdded = new DateTime(2025, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("SpeakingClub.Entity.Tag", b =>
                {
                    b.Property<int>("TagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TagId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("TagId");

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            TagId = 1,
                            Name = "Grammar"
                        },
                        new
                        {
                            TagId = 2,
                            Name = "Vocabulary"
                        },
                        new
                        {
                            TagId = 3,
                            Name = "Listening"
                        },
                        new
                        {
                            TagId = 4,
                            Name = "Reading"
                        },
                        new
                        {
                            TagId = 5,
                            Name = "Writing"
                        });
                });

            modelBuilder.Entity("SpeakingClub.Entity.UserQuiz", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("QuizId")
                        .HasColumnType("int");

                    b.Property<int>("TotalAttempts")
                        .HasColumnType("int");

                    b.HasKey("UserId", "QuizId");

                    b.HasIndex("QuizId");

                    b.ToTable("UserQuizzes");

                    b.HasData(
                        new
                        {
                            UserId = "user1-id",
                            QuizId = 1,
                            TotalAttempts = 2
                        },
                        new
                        {
                            UserId = "user2-id",
                            QuizId = 1,
                            TotalAttempts = 1
                        });
                });

            modelBuilder.Entity("SpeakingClub.Entity.Word", b =>
                {
                    b.Property<int>("WordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WordId"));

                    b.Property<string>("Definition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Example")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsFromApi")
                        .HasColumnType("bit");

                    b.Property<string>("Origin")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pronunciation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Synonyms")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Term")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("WordId");

                    b.ToTable("Words");

                    b.HasData(
                        new
                        {
                            WordId = 1,
                            Definition = "A deviation from the norm",
                            Example = "The color aberration was noticeable.",
                            IsFromApi = false,
                            Term = "Aberration"
                        },
                        new
                        {
                            WordId = 2,
                            Definition = "Kind and generous",
                            Example = "She had a benevolent smile.",
                            IsFromApi = false,
                            Term = "Benevolent"
                        });
                });

            modelBuilder.Entity("SpeakingClub.Identity.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            Id = "teacher1",
                            AccessFailedCount = 0,
                            Age = 30,
                            ConcurrencyStamp = "ce4349db-3704-4800-8d2e-011271ade94f",
                            Email = "teacher1@example.com",
                            EmailConfirmed = true,
                            FirstName = "Ali",
                            LastName = "Öğretmen",
                            LockoutEnabled = false,
                            NormalizedEmail = "TEACHER1@EXAMPLE.COM",
                            NormalizedUserName = "TEACHER1@EXAMPLE.COM",
                            PasswordHash = "FakeHash",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "securitystamp1",
                            TwoFactorEnabled = false,
                            UserName = "teacher1@example.com"
                        },
                        new
                        {
                            Id = "user1-id",
                            AccessFailedCount = 0,
                            Age = 22,
                            ConcurrencyStamp = "b12647bb-6772-41a1-a756-608375d88965",
                            Email = "user1@example.com",
                            EmailConfirmed = true,
                            FirstName = "Mert",
                            LastName = "Yılmaz",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER1@EXAMPLE.COM",
                            NormalizedUserName = "USER1@EXAMPLE.COM",
                            PasswordHash = "FakeHash",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5b089e9e-01f9-40e8-910a-4e35c87ed1c6",
                            TwoFactorEnabled = false,
                            UserName = "user1@example.com"
                        },
                        new
                        {
                            Id = "user2-id",
                            AccessFailedCount = 0,
                            Age = 18,
                            ConcurrencyStamp = "ac21837b-dc17-4f3b-9ffb-2713e0c51731",
                            Email = "user2@example.com",
                            EmailConfirmed = true,
                            FirstName = "Zeynep",
                            LastName = "Demir",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER2@EXAMPLE.COM",
                            NormalizedUserName = "USER2@EXAMPLE.COM",
                            PasswordHash = "FakeHash",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "958765e6-0e11-45e1-b099-ca54f51a2fab",
                            TwoFactorEnabled = false,
                            UserName = "user2@example.com"
                        });
                });

            modelBuilder.Entity("BlogQuiz", b =>
                {
                    b.HasOne("SpeakingClub.Entity.Blog", null)
                        .WithMany()
                        .HasForeignKey("BlogsBlogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SpeakingClub.Entity.Quiz", null)
                        .WithMany()
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BlogTag", b =>
                {
                    b.HasOne("SpeakingClub.Entity.Blog", null)
                        .WithMany()
                        .HasForeignKey("BlogsBlogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SpeakingClub.Entity.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsTagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QuizTag", b =>
                {
                    b.HasOne("SpeakingClub.Entity.Quiz", null)
                        .WithMany()
                        .HasForeignKey("QuizzesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SpeakingClub.Entity.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsTagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QuizWord", b =>
                {
                    b.HasOne("SpeakingClub.Entity.Quiz", null)
                        .WithMany()
                        .HasForeignKey("QuizzesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SpeakingClub.Entity.Word", null)
                        .WithMany()
                        .HasForeignKey("WordsWordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SpeakingClub.Entity.Blog", b =>
                {
                    b.HasOne("SpeakingClub.Entity.Category", "Category")
                        .WithMany("Blogs")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Category");
                });

            modelBuilder.Entity("SpeakingClub.Entity.BlogQuiz", b =>
                {
                    b.HasOne("SpeakingClub.Entity.Blog", "Blog")
                        .WithMany()
                        .HasForeignKey("BlogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SpeakingClub.Entity.Quiz", "Quiz")
                        .WithMany()
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Blog");

                    b.Navigation("Quiz");
                });

            modelBuilder.Entity("SpeakingClub.Entity.Comment", b =>
                {
                    b.HasOne("SpeakingClub.Entity.Blog", "Blog")
                        .WithMany()
                        .HasForeignKey("BlogId");

                    b.HasOne("SpeakingClub.Entity.Quiz", "Quiz")
                        .WithMany()
                        .HasForeignKey("QuizId");

                    b.HasOne("SpeakingClub.Identity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Blog");

                    b.Navigation("Quiz");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SpeakingClub.Entity.Question", b =>
                {
                    b.HasOne("SpeakingClub.Entity.Quiz", "Quiz")
                        .WithMany("Questions")
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Quiz");
                });

            modelBuilder.Entity("SpeakingClub.Entity.Quiz", b =>
                {
                    b.HasOne("SpeakingClub.Entity.Category", "Category")
                        .WithMany("Quizzes")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Category");
                });

            modelBuilder.Entity("SpeakingClub.Entity.QuizAnswer", b =>
                {
                    b.HasOne("SpeakingClub.Entity.Question", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SpeakingClub.Entity.Quiz", null)
                        .WithMany("Answers")
                        .HasForeignKey("QuizId");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("SpeakingClub.Entity.QuizResponse", b =>
                {
                    b.HasOne("SpeakingClub.Entity.QuizAnswer", "QuizAnswer")
                        .WithMany()
                        .HasForeignKey("QuizAnswerId");

                    b.HasOne("SpeakingClub.Entity.QuizSubmission", "QuizSubmission")
                        .WithMany("QuizResponses")
                        .HasForeignKey("QuizSubmissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QuizAnswer");

                    b.Navigation("QuizSubmission");
                });

            modelBuilder.Entity("SpeakingClub.Entity.QuizSubmission", b =>
                {
                    b.HasOne("SpeakingClub.Entity.Quiz", "Quiz")
                        .WithMany()
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Quiz");
                });

            modelBuilder.Entity("SpeakingClub.Entity.Rating", b =>
                {
                    b.HasOne("SpeakingClub.Entity.Blog", "Blog")
                        .WithMany()
                        .HasForeignKey("BlogId");

                    b.HasOne("SpeakingClub.Entity.Quiz", "Quiz")
                        .WithMany()
                        .HasForeignKey("QuizId");

                    b.HasOne("SpeakingClub.Identity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Blog");

                    b.Navigation("Quiz");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SpeakingClub.Entity.UserQuiz", b =>
                {
                    b.HasOne("SpeakingClub.Entity.Quiz", "Quiz")
                        .WithMany("UserQuizzes")
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SpeakingClub.Identity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Quiz");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SpeakingClub.Entity.Category", b =>
                {
                    b.Navigation("Blogs");

                    b.Navigation("Quizzes");
                });

            modelBuilder.Entity("SpeakingClub.Entity.Question", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("SpeakingClub.Entity.Quiz", b =>
                {
                    b.Navigation("Answers");

                    b.Navigation("Questions");

                    b.Navigation("UserQuizzes");
                });

            modelBuilder.Entity("SpeakingClub.Entity.QuizSubmission", b =>
                {
                    b.Navigation("QuizResponses");
                });
#pragma warning restore 612, 618
        }
    }
}
