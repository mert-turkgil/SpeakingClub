@model SpeakingClub.Models.LoginViewModel
@inject LanguageService Localizer

@{
    ViewData["Title"] = Localizer.GetKey("Login_Title");
    var returnUrl = ViewData["ReturnUrl"] as string;
}

@section Css {
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-rbsA2VBKQhggwzxH7pPCaAqO46MgnOM80zW1RWuH61DGLwZJEdK2Kadq2F9CUG65" crossorigin="anonymous">
<style>
    .animated-login-form {
        display: flex;
        flex-direction: column;
        gap: 15px;
        background-color: #fff;
        padding: 30px;
        border-radius: 15px;
        box-shadow: 0 8px 16px rgba(0,0,0,0.1);
        max-width: 500px;
        margin: auto;
    }

    .animated-login-title {
        font-size: 28px;
        color: royalblue;
        font-weight: 600;
        position: relative;
        padding-left: 30px;
    }

    .animated-login-title::before, .animated-login-title::after {
        content: "";
        position: absolute;
        border-radius: 50%;
        left: 0;
        background-color: royalblue;
    }

    .animated-login-title::before {
        width: 18px;
        height: 18px;
    }

    .animated-login-title::after {
        width: 18px;
        height: 18px;
        animation: pulse 1.2s infinite ease-in-out;
    }

    @@keyframes pulse {
        0% { transform: scale(1); opacity: 1; }
        100% { transform: scale(2); opacity: 0; }
    }
</style>
}
@if (!ViewData.ModelState.IsValid)
{
<div class="alert alert-warning mt-3">
    @Localizer.GetKey("WarningMessage_Login_UnderDevelopment")
</div>
}
@if (TempData["ShowSplash"] != null)
{
    <script>
        window.localizedSplashMessage = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(TempData["SplashMessage"]));
    </script>

    <!-- Three.js -->
    <script type="importmap">
    {
      "imports": {
        "three": "/lib/three/build/three.module.js"
      }
    }
    </script>
    <script type="module" src="~/js/splash.js"></script>

    <div id="splash-container"></div>

    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const splash = document.getElementById("splash-container");

            // Start with splash
            splash.innerHTML = `<div class="splash-animation"></div>`;

            // After 5s, show confirmation message
            setTimeout(() => {
                splash.innerHTML = `<div class="alert alert-info text-center p-3 rounded shadow">
                    ${window.localizedSplashMessage}
                </div>`;
            }, 5000);
        });
    </script>
}
<div style="height: 100vh;" class="container-xxl">
<div class="row py-5">
    <div class="col">
    <form asp-controller="Account" asp-action="Login" asp-route-returnUrl="@returnUrl" method="post" class="animated-login-form">
        <input type="text" name="honeypot" style="display:none" autocomplete="off" tabindex="-1" />
        @Html.AntiForgeryToken()
        <h2 class="animated-login-title">@Localizer.GetKey("Login_Header")</h2>
        <p class="text-muted">@Localizer.GetKey("Login_Subtitle")</p>

        <div asp-validation-summary="ModelOnly" class="alert alert-danger"></div>

        <div>
             <label asp-for="Email" class="form-label">@Localizer.GetKey("Label_Email")</label>
             <input asp-for="Email" class="form-control" placeholder="@Localizer.GetKey("Placeholder_Email")">
             <span asp-validation-for="Email" class="text-danger"></span>
        </div>

        <div>
             <label asp-for="Password" class="form-label">@Localizer.GetKey("Label_Password")</label>
             <input asp-for="Password" type="password" class="form-control" placeholder="••••••">
             <span asp-validation-for="Password" class="text-danger"></span>
        </div>

        <div class="form-check">
             <input asp-for="RememberMe" class="form-check-input">
             <label asp-for="RememberMe" class="form-check-label">@Localizer.GetKey("Label_RememberMe")</label>
        </div>
        
        <!-- Always display the reCAPTCHA widget -->
        <div class="g-recaptcha" data-sitekey="@ViewBag.RecaptchaSiteKey"></div> 

        <button type="submit" class="btn btn-primary w-100 mt-2">@Localizer.GetKey("Button_Login")</button>
        
        <div class="text-center w-100 mt-3">
             @Localizer.GetKey("NoAccountYet") <a asp-action="Register" asp-route-returnUrl="@returnUrl">@Localizer.GetKey("Link_RegisterHere")</a>
        </div>
    </form>
    </div>
</div>
</div>
@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script src="https://www.google.com/recaptcha/api.js" async defer></script>
    <script>
        // Reset reCAPTCHA if there are validation errors (keeps it visible)
        document.addEventListener("DOMContentLoaded", function() {
            @if (!ViewData.ModelState.IsValid)
            {
                <text>
                // Wait for reCAPTCHA to load, then reset it
                var resetInterval = setInterval(function() {
                    if (typeof grecaptcha !== 'undefined' && grecaptcha.reset) {
                        grecaptcha.reset();
                        clearInterval(resetInterval);
                    }
                }, 100);
                </text>
            }
        });
    </script>
        <!-- 2. Bootstrap Bundle (uses jQuery) -->
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
}