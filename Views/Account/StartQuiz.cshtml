@model SpeakingClub.Entity.Quiz
@inject LanguageService _localization
@{    
    var fullscreenExitUrl = Url.Action("Quizzes", "Account", new { warning = "FullscreenExit" });
    var leaveScreenUrl = Url.Action("Quizzes", "Account", new { warning = "LeaveScreen" });
    var inactivityUrl = Url.Action("Quizzes", "Account", new { warning = "Inactivity" });
    var submitQuizUrl = Url.Action("SubmitQuiz", "Account");
    }
<!-- Fullscreen Quiz Container -->
<div id="quizContainer" class="fullscreen-container">
    <h2 class="text-center">@Model.Title</h2>

    <!-- Timer -->
    <div id="overallTimer" class="text-end mb-3">
        @_localization.GetKey("TotalTimeLabel") <span id="totalTime">00:00</span>
    </div>

    <form id="quizForm" method="post" asp-controller="Account" asp-action="SubmitQuiz">
        <input type="hidden" name="QuizId" value="@Model.Id.ToString()" />
        <input type="hidden" name="ElapsedTime" id="elapsedTime" value="0" />

        <div id="questionsContainer">
            @for (int i = 0; i < Model.Questions.Count; i++)
            {
                var question = Model.Questions.ElementAt(i);
                var shuffledAnswers = question.Answers.OrderBy(_ => Guid.NewGuid()).ToList(); // Shuffle answers

                <div class="question-panel" data-index="@i" style="display:@(i == 0 ? "block" : "none")">
                    <div class="card mb-3 shadow-sm">
                        <div class="card-body">
                            <h5 class="card-title">@question.QuestionText</h5>

                            @* Display media if provided *@
                            @if (!string.IsNullOrEmpty(question.ImageUrl))
                            {
                                <img src="@Url.Content(question.ImageUrl)" class="img-fluid mb-3" alt="Question Image" />
                            }
                            @if (!string.IsNullOrEmpty(question.AudioUrl))
                            {
                                var audioSrc = Url.Content("~/mp3/" + question.AudioUrl);
                                <audio controls class="w-100 mb-3">
                                    <source src="@audioSrc" type="audio/mpeg" />
                                    @_localization.GetKey("AudioNotSupported")
                                </audio>
                            }
                            @if (!string.IsNullOrEmpty(question.VideoUrl))
                            {
                                <div class="mb-3">
                                    <iframe width="100%" height="315" src="@question.VideoUrl" frameborder="0" allowfullscreen></iframe>
                                </div>
                            }

                            @* Render answer choices as radio buttons (shuffled) *@
                            @foreach (var answer in shuffledAnswers)
                            {
                                <div class="form-check">
                                    <input class="form-check-input" type="radio" 
                                        name="responses[@question.Id]" 
                                        value="@answer.Id" required />
                                    <label class="form-check-label">@answer.AnswerText</label>
                                </div>
                            }

                            @* Hidden field to capture time spent on this question (in seconds) *@
                            <input type="hidden" name="QuestionTimes[@question.Id]" class="question-time" value="0" />
                        </div>
                    </div>

                    <div class="d-flex justify-content-between">
                        @if (i > 0)
                        {
                            <button type="button" class="btn btn-secondary prevBtn">@_localization.GetKey("PreviousButton")</button>
                        }
                        @if (i < Model.Questions.Count - 1)
                        {
                            <button type="button" class="btn btn-primary nextBtn">@_localization.GetKey("NextButton")</button>
                        }
                        else
                        {
                            <button type="submit" class="btn btn-success">@_localization.GetKey("SubmitExamButton")</button>
                        }
                    </div>
                </div>
            }
        </div>
    </form>
</div>

<!-- Start Exam Modal -->
<div id="startExamModal" class="modal fade show d-block" tabindex="-1">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content text-center p-4">
            <h5>@_localization.GetKey("StartQuizModalTitle")</h5>
            <p>@_localization.GetKey("StartQuizModalMessage")</p>
            <button class="btn btn-primary" id="startQuizBtn">@_localization.GetKey("StartQuizButton")</button>
        </div>
    </div>
</div>
<div id="loadingOverlay" style="
    display: none; position: fixed; z-index: 99999;
    top: 0; left: 0; width: 100vw; height: 100vh;
    background: rgba(0,0,0,0.5);
    color: white; font-size: 2rem;
    justify-content: center; align-items: center; text-align: center;">
    <div>
        <div class="spinner-border text-light mb-3" role="status"></div>
        <div>Lütfen bekleyin, sınav kaydediliyor...</div>
    </div>
</div>


@section Css {
    <style>
        #loadingOverlay {
            display: none;
            position: fixed; z-index: 99999;
            top: 0; left: 0; width: 100vw; height: 100vh;
            background: rgba(0,0,0,0.5);
            color: white; font-size: 2rem;
            justify-content: center; align-items: center;
            text-align: center;
        }
        #loadingOverlay.active { display: flex; }

        body, html {
            margin: 0;
            padding: 0;
            overflow: hidden; /* Prevent scrolling */
        }
        .fullscreen-container {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100vw;
            height: 100vh;
            background: white;
            overflow-y: auto;
            padding: 20px;
        }
        .modal {
            background: black;
            opacity: 1;
        }
        .modal-content {
            background: white;
            border-radius: 10px;
        }
        .fullscreen-mode .navbar, 
        .fullscreen-mode .footer, 
        .fullscreen-mode .header {
            display: none !important;
        }
    </style>
}

@section Scripts {
    <script>
    function showLoadingOverlay() {
        var overlay = document.getElementById('loadingOverlay');
        if (overlay) overlay.style.display = 'flex'; // veya overlay.classList.add('active');
    }
    </script>
    <script>
        let isSubmitting = false;
        function autoSubmitQuizAndRedirect(redirectUrl) {
            if (isSubmitting) return;
            isSubmitting = true;
            showLoadingOverlay();
            // Formun DOM'daki ID'si
            var form = document.getElementById('quizForm');
            if (!form) {
                window.location.href = redirectUrl;
                return;
            }

            // Formdaki verileri al
            var formData = new FormData(form);

            // ElapsedTime'ı hesapla (eğer examStartTime değişkenin varsa)
            if (typeof examStartTime !== "undefined") {
                formData.set('ElapsedTime', Math.floor((Date.now() - examStartTime) / 1000));
            }

            // Fetch ile AJAX submit
            fetch('@submitQuizUrl', {
                method: "POST",
                body: formData,
                credentials: "include"
            })
            .then(function () {
                window.location.href = redirectUrl;
            })
            .catch(function () {
                // Yine de yönlendir
                window.location.href = redirectUrl;
            });
        }
    </script>
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            let examStartTime;
            let overallTimerInterval;
            let currentQuestionIndex = 0;
            let questionStartTime = Date.now();
            let warningTimeout;
            let inactivityTimeout;

            // Start Exam Button - Go Fullscreen
            document.getElementById("startQuizBtn").addEventListener("click", function () {
                let quizContainer = document.getElementById("quizContainer");
                quizContainer.style.display = "block";

                // Request fullscreen
                if (quizContainer.requestFullscreen) {
                    quizContainer.requestFullscreen();
                } else if (quizContainer.mozRequestFullScreen) {
                    quizContainer.mozRequestFullScreen();
                } else if (quizContainer.webkitRequestFullscreen) {
                    quizContainer.webkitRequestFullscreen();
                } else if (quizContainer.msRequestFullscreen) {
                    quizContainer.msRequestFullscreen();
                }

                // Start timers
                examStartTime = Date.now();
                overallTimerInterval = setInterval(updateOverallTimer, 1000);

                // Hide modal
                document.getElementById("startExamModal").style.display = "none";

                // Start inactivity timer
                resetInactivityTimer();
            });

            // Update the overall timer
            function updateOverallTimer() {
                const elapsed = Math.floor((Date.now() - examStartTime) / 1000);
                document.getElementById("totalTime").textContent = formatTime(elapsed);
            }

            // Format time in MM:SS format
            function formatTime(seconds) {
                const mins = Math.floor(seconds / 60);
                const secs = seconds % 60;
                return (mins < 10 ? "0" + mins : mins) + ":" + (secs < 10 ? "0" + secs : secs);
            }
            // Reset inactivity timer
            function resetInactivityTimer() {
                clearTimeout(inactivityTimeout);
                inactivityTimeout = setTimeout(() => {
                    alert("@Html.Raw(@_localization.GetKey("ExamCanceledInactivity"))");
                    autoSubmitQuizAndRedirect('@inactivityUrl');
                }, 30000);
            }

            // Prevent user from leaving fullscreen
            document.addEventListener("fullscreenchange", function () {
                if (!document.fullscreenElement) {
                    alert("@Html.Raw(@_localization.GetKey("ExamCanceledFullscreenExit"))");
                    autoSubmitQuizAndRedirect('@fullscreenExitUrl');
                }
            });

            document.addEventListener("mouseleave", () => {
                warningTimeout = setTimeout(() => {
                    alert("@Html.Raw(@_localization.GetKey("ExamCanceledLeaveScreen"))");
                    autoSubmitQuizAndRedirect('@leaveScreenUrl');
                }, 3000);
            });

            // Clear warning timeout if mouse re-enters the screen
            document.addEventListener("mouseenter", () => clearTimeout(warningTimeout));

            // Show the current question based on index
            function showQuestion(index) {
                const panels = document.querySelectorAll('.question-panel');
                panels.forEach((panel, i) => {
                    panel.style.display = (i === index) ? "block" : "none";
                });
                questionStartTime = Date.now();
            }

            // Handle Next and Previous button clicks
            document.addEventListener('click', function (e) {
                if (e.target.classList.contains('nextBtn')) {
                    let currentTime = Math.floor((Date.now() - questionStartTime) / 1000);
                    let currentPanel = document.querySelector('.question-panel[data-index="' + currentQuestionIndex + '"]');
                    let timeInput = currentPanel.querySelector('.question-time');
                    timeInput.value = currentTime;

                    currentQuestionIndex++;
                    showQuestion(currentQuestionIndex);
                } else if (e.target.classList.contains('prevBtn')) {
                    currentQuestionIndex--;
                    showQuestion(currentQuestionIndex);
                }

                // Reset inactivity timer on any user interaction
                resetInactivityTimer();
            });

            // Handle form submission
            document.getElementById('quizForm').addEventListener('submit', function (event) {
                if (isSubmitting) {
                    event.preventDefault(); // Çift gönderimi tamamen engelle
                    return;
                }
                isSubmitting = true;
                const totalElapsed = Math.floor((Date.now() - examStartTime) / 1000);
                document.getElementById('elapsedTime').value = totalElapsed;
                clearInterval(overallTimerInterval);
                clearTimeout(inactivityTimeout);
            });
        });
    </script>
}