@model IEnumerable<QuizMonitorViewModel>
@{
    ViewData["Title"] = "Quiz Monitor";
    var users = Model.Select(x => x.UserName).Distinct().OrderBy(x => x).ToList();
    var quizzes = Model.Select(x => x.QuizTitle).Distinct().OrderBy(x => x).ToList();
}

@section Css {
    <link rel="stylesheet" href="https://cdn.datatables.net/1.13.6/css/dataTables.bootstrap5.min.css" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css" />
    <style>
        #monitor-container { max-width:1200px; margin:auto; }
        #userSelect, #quizSelect { max-width:280px; }
        .dataTables_wrapper .dataTables_filter { float: right; }
        .modal-dialog { max-width: 700px; }
        canvas { background: #fff; border-radius: 8px; }
    </style>
}

<div id="monitor-container" class="py-3">
    <h2 class="mb-4"><i class="fas fa-chart-line"></i> Quiz Monitor</h2>
    <div class="mb-4 d-flex flex-wrap align-items-center gap-3">
        <label for="userSelect" class="fw-bold">Filter by Student:</label>
        <select id="userSelect" class="form-select">
            <option value="">All Students</option>
            @foreach (var u in users)
            {
                <option>@u</option>
            }
        </select>
        <label for="quizSelect" class="fw-bold ms-2">Filter by Quiz:</label>
        <select id="quizSelect" class="form-select">
            <option value="">All Quizzes</option>
            @foreach (var q in quizzes)
            {
                <option>@q</option>
            }
        </select>
        <label class="ms-3"><input type="checkbox" id="showFailed" /> Show only failed attempts</label>
        <button class="btn btn-outline-success ms-2" id="exportExcel"><i class="fas fa-file-excel"></i> Export Excel</button>
        <button class="btn btn-outline-danger" id="exportPdf"><i class="fas fa-file-pdf"></i> Export PDF</button>
    </div>

    <div class="mb-4 row g-4">
        <div class="col-md-6">
            <canvas id="scoresChart" height="220"></canvas>
        </div>
        <div class="col-md-6">
            <canvas id="trendChart" height="220"></canvas>
        </div>
    </div>
    <div class="mb-4 row g-4">
        <div class="col-md-6">
            <canvas id="avgScoreChart" height="180"></canvas>
        </div>
        <div class="col-md-6">
            <canvas id="successPieChart" height="180"></canvas>
        </div>
    </div>
    <div class="mb-4 row g-4">
        <div class="col-md-12">
            <canvas id="attemptsBarChart" height="160"></canvas>
        </div>
    </div>
    <div class="card shadow">
        <div class="card-body">
            <table id="monitorTable" class="table table-striped table-bordered" style="width:100%">
                <thead>
                    <tr>
                        <th>Student</th>
                        <th>Quiz</th>
                        <th>Score</th>
                        <th>Max Score</th>
                        <th>Attempt</th>
                        <th>Time</th>
                        <th>Age</th>
                        <th>Submission Time</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var s in Model)
                    {
                        <tr data-submission='@Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(s))'>
                            <td>@s.UserName</td>
                            <td>@s.QuizTitle</td>
                            <td>@s.Score</td>
                            <td>@s.MaxScore</td>
                            <td>@s.AttemptNumber</td>
                            <td>@s.SubmissionTimeFormatted</td>
                            <td>@s.Age</td>
                            <td data-order="@s.SubmissionDate.Ticks">@s.SubmissionTimeFormatted</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

<!-- Drilldown Modal -->
<div class="modal fade" id="attemptDetailModal" tabindex="-1" aria-labelledby="attemptDetailModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="attemptDetailModalLabel"><i class="fas fa-list"></i> Attempt Details</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <div id="attemptDetailBody"></div>
      </div>
    </div>
  </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <!-- DataTables, SheetJS, jsPDF, Chart.js, SignalR should be in _Layout.cshtml -->
    <script>
        let allData = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model));
        let filtered = allData;
        let dataTable;

        function safeDestroy(chartRef) {
            if (chartRef && typeof chartRef.destroy === "function") chartRef.destroy();
        }

        function updateCharts(data) {
            // Destroy old charts safely
            safeDestroy(window.scoresChart);
            safeDestroy(window.trendChart);
            safeDestroy(window.avgScoreChart);
            safeDestroy(window.successPieChart);
            safeDestroy(window.attemptsBarChart);

            // Score per attempt (bar)
            const quizTitles = data.map(x => x.QuizTitle + ' #' + x.AttemptNumber + ' (' + x.SubmissionTimeFormatted + ')');
            const scores = data.map(x => x.Score);
            const maxScores = data.map(x => x.MaxScore);

            const ctx1 = document.getElementById('scoresChart').getContext('2d');
            window.scoresChart = new Chart(ctx1, {
                type: 'bar',
                data: {
                    labels: quizTitles,
                    datasets: [
                        { label: 'Score', data: scores, backgroundColor: 'rgba(54, 162, 235, 0.7)' },
                        { label: 'Max Score', data: maxScores, backgroundColor: 'rgba(153, 102, 255, 0.4)' }
                    ]
                },
                options: { responsive: true, plugins: { legend: { position: 'top' } }, indexAxis: 'y' }
            });

            // Score trend (line)
            const ctx2 = document.getElementById('trendChart').getContext('2d');
            window.trendChart = new Chart(ctx2, {
                type: 'line',
                data: {
                    labels: data.map(x => x.SubmissionTimeFormatted),
                    datasets: [{
                        label: 'Score Over Time',
                        data: data.map(x => x.Score),
                        borderColor: 'rgba(255,99,132,1)',
                        fill: false,
                        tension: 0.2
                    }]
                },
                options: { responsive: true, plugins: { legend: { display: true } } }
            });

            // Average score per quiz (bar)
            let avgScores = {};
            data.forEach(x => {
                if (!avgScores[x.QuizTitle]) avgScores[x.QuizTitle] = [];
                avgScores[x.QuizTitle].push(x.Score);
            });
            const avgLabels = Object.keys(avgScores);
            const avgData = avgLabels.map(k => (avgScores[k].reduce((a, b) => a + b, 0) / avgScores[k].length).toFixed(2));
            const ctx3 = document.getElementById('avgScoreChart').getContext('2d');
            window.avgScoreChart = new Chart(ctx3, {
                type: 'bar',
                data: {
                    labels: avgLabels,
                    datasets: [{
                        label: 'Average Score',
                        data: avgData,
                        backgroundColor: 'rgba(255, 206, 86, 0.7)'
                    }]
                },
                options: { responsive: true, plugins: { legend: { position: 'top' } }, indexAxis: 'y' }
            });

            // Success ratio (pie)
            let passFailCount = { Passed: 0, Failed: 0 };
            data.forEach(x => {
                if (x.Score >= x.MaxScore && x.MaxScore > 0) passFailCount.Passed++;
                else if (x.MaxScore > 0) passFailCount.Failed++;
            });
            const ctxPie = document.getElementById('successPieChart').getContext('2d');
            window.successPieChart = new Chart(ctxPie, {
                type: 'doughnut',
                data: {
                    labels: ['Passed', 'Failed'],
                    datasets: [{
                        data: [passFailCount.Passed, passFailCount.Failed],
                        backgroundColor: ['#4caf50', '#e53935']
                    }]
                },
                options: {
                    responsive: true,
                    plugins: {
                        legend: { position: 'top' },
                        title: { display: true, text: 'Overall Pass/Fail Ratio' }
                    }
                }
            });

            // Attempts per student (bar)
            let attemptsPerUser = {};
            data.forEach(x => {
                if (!attemptsPerUser[x.UserName]) attemptsPerUser[x.UserName] = 0;
                attemptsPerUser[x.UserName]++;
            });
            const users = Object.keys(attemptsPerUser);
            const attempts = users.map(u => attemptsPerUser[u]);
            const ctxBar = document.getElementById('attemptsBarChart').getContext('2d');
            window.attemptsBarChart = new Chart(ctxBar, {
                type: 'bar',
                data: {
                    labels: users,
                    datasets: [{
                        label: 'Attempts',
                        data: attempts,
                        backgroundColor: 'rgba(33,150,243,0.6)'
                    }]
                },
                options: {
                    responsive: true,
                    plugins: {
                        legend: { display: false },
                        title: { display: true, text: 'Quiz Attempts per Student' }
                    },
                    indexAxis: 'y'
                }
            });
        }

        function filterAndRedraw() {
            let selectedUser = $('#userSelect').val();
            let selectedQuiz = $('#quizSelect').val();
            let showFailed = $('#showFailed').is(':checked');

            filtered = allData.filter(x =>
                (!selectedUser || x.UserName === selectedUser) &&
                (!selectedQuiz || x.QuizTitle === selectedQuiz) &&
                (!showFailed || (x.Score < x.MaxScore && x.MaxScore > 0))
            );
            // Update DataTable
            dataTable.clear().rows.add(filtered.map(x => [
                x.UserName, x.QuizTitle, x.Score, x.MaxScore, x.AttemptNumber, x.SubmissionTimeFormatted, x.Age, x.SubmissionTimeFormatted
            ])).draw();

            // Update charts
            updateCharts(filtered);
        }

        $(function () {
            // DataTable init
            dataTable = $('#monitorTable').DataTable({
                responsive: true,
                order: [[7, "desc"]],
                columns: [
                    null, null, null, null, null, null, null, { orderData: 7 }
                ]
            });

            // Initial draw
            updateCharts(allData);

            // Filters
            $('#userSelect, #quizSelect, #showFailed').on('change', filterAndRedraw);

            // Export Excel
            $('#exportExcel').click(function () {
                const data = dataTable.rows({ search: 'applied' }).data().toArray();
                const ws = XLSX.utils.aoa_to_sheet([
                    ['Student', 'Quiz', 'Score', 'Max Score', 'Attempt', 'Time', 'Age', 'Submission Time'],
                    ...data
                ]);
                const wb = XLSX.utils.book_new();
                XLSX.utils.book_append_sheet(wb, ws, "Quiz Results");
                XLSX.writeFile(wb, "quiz_results.xlsx");
            });
            // Export PDF
            $('#exportPdf').click(function () {
                const { jsPDF } = window.jspdf;
                const doc = new jsPDF();
                const data = dataTable.rows({ search: 'applied' }).data().toArray();
                doc.text("Quiz Results", 10, 10);
                doc.autoTable({
                    head: [['Student', 'Quiz', 'Score', 'Max Score', 'Attempt', 'Time', 'Age', 'Submission Time']],
                    body: data,
                    startY: 20
                });
                doc.save("quiz_results.pdf");
            });

            // Row click for drilldown modal
            $('#monitorTable tbody').on('click', 'tr', function () {
                let row = $(this).data('submission');
                if (!row || !row.Responses) return;
                let html = `<div class="mb-2"><b>Student:</b> ${row.UserName} <br><b>Quiz:</b> ${row.QuizTitle} <br><b>Attempt:</b> ${row.AttemptNumber} <br><b>Score:</b> ${row.Score}/${row.MaxScore} <br><b>Submitted:</b> ${row.SubmissionTimeFormatted}</div>`;
                html += '<table class="table table-bordered"><thead><tr><th>Question</th><th>Answer</th><th>Correct?</th><th>Time (s)</th></tr></thead><tbody>';
                row.Responses.forEach(resp => {
                    html += `<tr>
                        <td>${resp.Question}</td>
                        <td>${resp.Answer}</td>
                        <td>${resp.IsCorrect ? '<span class="badge bg-success">Yes</span>' : '<span class="badge bg-danger">No</span>'}</td>
                        <td>${resp.TimeTakenSeconds}</td>
                    </tr>`;
                });
                html += '</tbody></table>';
                $('#attemptDetailBody').html(html);
                $('#attemptDetailModal').modal('show');
            });

            // SignalR live updates (optional)
            if (window.signalR && signalR.HubConnectionBuilder) {
                const connection = new signalR.HubConnectionBuilder().withUrl("/quizMonitorHub").build();
                connection.on("ReceiveSubmission", function (sub) {
                    allData.push(sub);
                    filterAndRedraw();
                });
                connection.start().catch(err => console.error(err));
            }
        });
    </script>
}
